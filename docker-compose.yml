version: '3.9'
services:
  web:
    restart: on-failure
    build:
      context: services/web/
      dockerfile: Dockerfile
    container_name: "web"
    ports:
      - "8000:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      TEXT_TOPIC: $TEXT_TOPIC
      GRAPHITE_HOST: graphite
      GRAPHITE_PORT: 8125
    networks:
      - grafana-net
    volumes:
      - ./services/web/app:/usr/src/web/app
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

  moderator:
    platform: linux/amd64
    restart: on-failure
    build:
      context: services/moderator/
      dockerfile: Dockerfile
    container_name: "moderator"
    ports:
      - "4000:4000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      TEXT_TOPIC: $TEXT_TOPIC
      GRAPHITE_HOST: graphite
      GRAPHITE_PORT: 8125
    networks:
      - grafana-net
    volumes:
      - ./services/moderator/app:/usr/src/moderator/app
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 4000

  prediction-worker:
    restart: on-failure
    platform: linux/amd64
    build:
      context: services/prediction-worker/
      dockerfile: Dockerfile
    container_name: "prediction-worker"
    ports:
      - "7000:7000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      PREDICTION_TOPIC: $PREDICTION_TOPIC
      GRAPHITE_HOST: graphite
      GRAPHITE_PORT: 8125
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./services/prediction-worker/app:/usr/src/prediction-worker/app
    networks:
      - grafana-net

  toxic-detector:
    restart: on-failure
    build:
      context: services/toxic-detector/
      dockerfile: Dockerfile
    container_name: "toxic-detector"
    platform: linux/amd64
    ports:
      - "9000:9000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
      TEXT_TOPIC: $TEXT_TOPIC
      PREDICTION_TOPIC: $PREDICTION_TOPIC
      GRAPHITE_HOST: graphite
      GRAPHITE_PORT: 8125
    networks:
      - grafana-net
    depends_on:
      kafka:
        condition: service_healthy

  zookeeper:
    image: 'bitnami/zookeeper:3.7.0'
    container_name: zookeeper
    platform: linux/amd64
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=$ALLOW_ANONYMOUS_LOGIN
    networks:
      - grafana-net

  kafka:
    image: 'bitnami/kafka:2.8.0'
    container_name: kafka
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=$KAFKA_ZOOKEEPER_CONNECT
      - ALLOW_PLAINTEXT_LISTENER=$ALLOW_PLAINTEXT_LISTENER
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-cluster.sh cluster-id --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
    networks:
      - grafana-net

  redis:
    image: redis:latest
    platform: linux/amd64
    container_name: redis
    networks:
      - grafana-net
    ports:
      - "6379:6379"

  grafana:
    image: grafana/grafana:9.1.5
    platform: linux/amd64
    container_name: grafana
    restart: always
    depends_on:
      - graphite
    ports:
      - 3000:3000
    networks:
      - grafana-net
    environment:
      - GF_LOG_LEVEL="error"
    volumes:
      - grafana-volume:/var/lib/grafana

  graphite:
    image: graphiteapp/graphite-statsd:1.1.5-13
    container_name: graphite
    platform: linux/amd64
    restart: always
    ports:
      - "2003-2004:2003-2004"
      - "2023-2024:2023-2024"
      - 8080:8080
      - 8125:8125/udp
      - 8126:8126
    networks:
      - grafana-net
    environment:
      - CARBON_AGGREGATOR_DISABLED=1

  locust_master:
    image: locustio/locust
    ports:
      - "8089:8089"
    volumes:
      - ./locustfile.py:/mnt/locust/locustfile.py
    command: -f /mnt/locust/locustfile.py --master -H http://locust_master:8089
    networks:
      - grafana-net

  locust_worker:
    image: locustio/locust
    volumes:
      - ./locustfile.py:/mnt/locust/locustfile.py
    command: -f /mnt/locust/locustfile.py --worker --master-host locust_master
    networks:
      - grafana-net

volumes:
  grafana-volume:
    external: true

networks:
  grafana-net: